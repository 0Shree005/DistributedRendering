package main

import (
	"log"
	"os"
	"path/filepath"
	"sync"

	"github.com/fsnotify/fsnotify"
)

var wasFileSaved bool = false

const fileName string = "./test1.blend"

func fileChange(ch chan<- bool, wg *sync.WaitGroup) {
	watcher, err := fsnotify.NewWatcher()
	log.Println("1 Watcher started, waiting for file changes...")
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()
	// defer wg.Done()

	err = watcher.Add(".")
	if err != nil {
		log.Fatal(err)
	}

	log.Println("2 Watcher started, waiting for file changes...")
	go func() {
		for {
			select {
			case event, ok := <-watcher.Events:
				log.Println("3 Watcher started, waiting for file changes...")
				if !ok {
					close(ch)
					return
				}
				log.Println("Event received:", event)
				if event.Has(fsnotify.Write) && filepath.Base(event.Name) == fileName {
					log.Println("modified file:", event.Name)
					wasFileSaved := processFile(fileName)
					ch <- wasFileSaved
				}
			case err, ok := <-watcher.Errors:
				if !ok {
					return
				}
				log.Println("error:", err)
			}
		}
	}()
}

func processFile(filename string) bool {
	log.Println("Processing file:", filename)
	data, err := os.ReadFile(filename)
	if err != nil {
		log.Println("error reading file:", err)
		return false
	}
	log.Printf("File size: %d bytes", len(data))
	return true
}
